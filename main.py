import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Filter
from aiogram.filters import CommandStart
from aiogram.types import Message, LinkPreviewOptions, FSInputFile, KeyboardButton, ReplyKeyboardMarkup

TOKEN = "6768737174:AAFIVNAzdlY-z5CY91uysjTr4fLhQuLpOyE"

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()

kb = [
    [KeyboardButton(text="–°—Ç–∞—Ç—å—è üìÉ")],
    [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚úâ")]
]

keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏! ‚ò∫")


class MyFilter(Filter):
    def __init__(self, my_text: str) -> None:
        self.my_text = my_text

    async def __call__(self, message: Message) -> bool:
        return message.text == self.my_text


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    cap = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {html.bold(message.from_user.full_name)}! –≠—Ç–æ –±–æ—Ç –Ω–∞ —Ç–µ–º—É:\n " \
          f"<i>\"–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏\"</i>\n\n" \
          f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ):\n" \
          f"1. /start - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
          f"2. /info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ\n" \
          f"3. /contacts - —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, —Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º\n\n" \
          f"–ü—Ä–æ–¥–æ–ª–∂–∏–º? ‚ò∫"
    await message.answer_photo(photo=FSInputFile("img/start.jpg"), caption=cap, reply_markup=keyboard)


@dp.message(MyFilter("/info"))
@dp.message(MyFilter("–°—Ç–∞—Ç—å—è üìÉ"))
async def echo_handler(message: Message) -> None:
    cap = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–Ω–∏–º–∞—é—Ç <b>—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ</b> –º–µ—Å—Ç–∞ üôå " \
          "–ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç—å—é üìÑ:\n\n" \
          "<a href=\"https://telegra.ph/Kak-ocenit-nadezhnost-internet-magazina-pered-pokupkoj-06-24\">–ü–µ—Ä–µ–π—Ç–∏ –∫ " \
          "—Å—Ç–∞—Ç—å–µ ‚úÖ</a> "
    link = LinkPreviewOptions(url="https://telegra.ph/Kak-ocenit-nadezhnost-internet-magazina-pered-pokupkoj-06-24",
                              prefer_large_media=True)
    await message.answer(text=cap, LinkPreviewOptions=link, reply_markup=keyboard)


@dp.message(MyFilter("/contacts"))
@dp.message(MyFilter("–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚úâ"))
async def echo_handler(message: Message) -> None:
    cap = "–ù–∞–¥ –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–ª –ì–µ—Ä–º–∞–Ω –°–∞–≤–µ–ª–∏–π –ë5123-58.03.01 üòâ\n" \
          "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π: german.sv@students.dvfu.ru"
    await message.answer_photo(photo=FSInputFile("img/contacts.jpg"), caption=cap, reply_markup=keyboard)


@dp.message()
async def echo_handler(message: Message) -> None:
    await message.answer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚ùå!\n–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é: /start")


async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
